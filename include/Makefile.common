######
# This file contains generic make rules. It assumes that the $SUFFIX
# variable has been pre-set with the relative path within the source
# tree that we are currently building in (i.e. the working directory
# for this make invocation).
#
# It also assumes that Makefile.config has been previously included.
# (We cannot include it here as we do not know the relative path to
# it from this generic file.)

##############
# Check for required variables
ifeq ($(PBC),)
$(error PBC not set; rule from Makefile.common used without including \
	Makefile.config first?)
endif

ifeq ($(BUILD_DIR),)
$(error BUILD_DIR not set; rule from Makefile.common used without \
	including Makefile.config first?)
endif

ifeq ($(SRC_GEN_DIR),)
$(error SRC_GEN_DIR not set; rule from Makefile.common used without \
	including Makefile.config first?)
endif

ifeq ($(CSRC_GEN_DIR),)
$(error CSRC_GEN_DIR not set; rule from Makefile.common used without \
	including Makefile.config first?)
endif

ifeq ($(SRC_ROOT_DIR),)
$(error SRC_ROOT_DIR not set; rule from Makefile.common used without \
	including Makefile.config first?)
endif

ifeq ($(SUFFIX),)
$(warning SUFFIX not set, will default to root of source tree!)
endif

# end variable checking
#############

OBJ_DIR=$(BUILD_DIR)/$(SUFFIX)
TEST_OBJ_DIR=$(BUILD_DIR)/tests/$(SUFFIX)

# Magic command to enable silent building.
# USAGE: $(call quiet-command, <command>, <message to print>)
quiet-command = $(if $(V),$1,$(if $(2),@echo $2 && $1, @$1))

# Create output directories.
.setup:
	$(call quiet-command, \
		mkdir -p $(BUILD_DIR)/$(SUFFIX); \
		mkdir -p $(BUILD_DIR)/tests/$(SUFFIX); \
		mkdir -p $(SRC_GEN_DIR)/$(SUFFIX); \
		mkdir -p $(CSRC_GEN_DIR)/$(SUFFIX); \
		touch .setup, \
		"  SETUP   $(BUILD_DIR)/$(SUFFIX)")

# Generate protobuf source.
$(SRC_GEN_DIR)/$(SUFFIX)/%.pb.cc $(SRC_GEN_DIR)/$(SUFFIX)/%.pb.h \
	$(CSRC_GEN_DIR)/$(SUFFIX)/%.pb-c.c \
	$(CSRC_GEN_DIR)/$(SUFFIX)/%.pb-c.h: %.proto .setup
	$(call quiet-command,$(PBC) --cpp_out=$(SRC_GEN_DIR)/ \
		--proto_path=$(SRC_ROOT_DIR)/ \
		$(SRC_ROOT_DIR)/$(SUFFIX)/$<, \
		"  GEN     $@")
	$(call quiet-command,$(PBCC) --c_out=$(CSRC_GEN_DIR)/ \
		--proto_path=$(SRC_ROOT_DIR)/ \
		$(SRC_ROOT_DIR)/$(SUFFIX)/$<, \
		"  GENC    $@")

# Build protobuf object.
$(OBJ_DIR)/%.pb.o: $(SRC_GEN_DIR)/$(SUFFIX)/%.pb.cc \
	           $(SRC_GEN_DIR)/$(SUFFIX)/%.pb.h
	$(call quiet-command, \
		$(CXX) $(CPPFLAGS) -c $< -I$(SRC_GEN_DIR)/$(SUFFIX)/ -o $@, \
		"  PBC     $@")

# Make unit test object file (special case).
$(TEST_OBJ_DIR)/%_test.o: %_test.cc %.cc %.h .setup
	$(call quiet-command, \
		$(CXX) $(CPPFLAGS) $(OPTFLAGS) $(DEFINES) \
		-c $(SRC_ROOT_DIR)/$(SUFFIX)/$< \
		-I$(SRC_GEN_DIR)/$(SUFFIX)/ -o $@, \
		"  TESTC   $@")

# Make object file (generic).
$(OBJ_DIR)/%.o: %.cc %.h .setup
	$(call quiet-command, \
		$(CXX) $(CPPFLAGS) $(OPTFLAGS) $(DEFINES) \
		-c $(SRC_ROOT_DIR)/$(SUFFIX)/$< \
		-I$(SRC_GEN_DIR)/$(SUFFIX)/ -o $@, \
		"  CXX     $@")

# Make unit test binary and add it to the test list run by global "make test".
$(TEST_OBJ_DIR)/%_test: %_test.cc $(OBJ_DIR)/%.o $(OBJ_LIB) $($(subst x,%,TESTS_x_DEPS)) $(TESTS_DEPS)
	$(call quiet-command, \
		$(CXX) $(CPPFLAGS) $(OPTFLAGS) $(DEFINES) \
		$(SRC_ROOT_DIR)/$(SUFFIX)/$< \
		$(GTEST_LIB) $(BUILD_DIR)/$(SUFFIX)/$*.o \
		$(TESTS_DEPS) $($(subst x,$*,TESTS_x_DEPS)) \
		-o $@ $(GTEST_FLAGS) $(LIBS); \
		echo "$@" >> $(BUILD_DIR)/tests/all_tests.txt, \
		"  TESTLNK $@")

# This case deals with inline-only class implementations (i.e. those that only
# have an -inl.h file, no .cc file).
# TODO(malte): We may get rid of this in favour of supplying empty/skeleton
# .cc files for such cases.
$(TEST_OBJ_DIR)/%_test: %_test.cc $(OBJ_LIB) $($(subst x,%,TESTS_x_DEPS)) $(TESTS_DEPS)
	$(call quiet-command, \
		$(CXX) $(CPPFLAGS) $(OPTFLAGS) $(DEFINES) \
		$(SRC_ROOT_DIR)/$(SUFFIX)/$< \
		$(GTEST_LIB) $(OBJ_LIB) \
		$(TESTS_DEPS) $($(subst x,$*,TESTS_x_DEPS)) \
		-o $@ $(GTEST_FLAGS) $(LIBS); \
		echo "$@" >> $(BUILD_DIR)/tests/all_tests.txt, \
		"  TESTLNK $@")

# Generic rule to make a statically linked library using AR. No dependencies,
# add those by writing a more specific rule with the exact .a file as its
# target.
%.a:
	$(call quiet-command, \
		$(AR) rcs $@ $^, \
		"  AR      $@")
